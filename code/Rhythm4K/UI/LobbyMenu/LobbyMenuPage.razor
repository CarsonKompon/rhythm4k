@* @using System;
@using System.Collections.Generic;
@using Sandbox;
@using Sandbox.Menu;
@using Sandbox.UI;
@using Sandbox.UI.GameMenu;
@attribute [StyleSheet]

@namespace Rhythm4K

@if(Game.Menu.Lobby == null)
{
    <div>No lobby found. You shouldn't be here...</div>
    return;
}

<root class="lobby">
    <div class="body">
        <div class="left">
            <div class="settings">
                <h2>Lobby Settings</h2>

                <FormGroup>
                    <Label>Name</Label>
                    <Control>
                        <TextEntry Value:bind=@Game.Menu.Lobby.Title Tooltip="Lobby Name"> </TextEntry>
                    </Control>
                </FormGroup>

                <FormGroup class="form-group">
                    <Label>Max Players</Label>
                    <Control>
                        <SliderControl ShowTextEntry="@true" ShowRange="@true" Min=@(1.0f) Max=@(64.0f) Step=@(1.0f) Value:bind=@Game.Menu.Lobby.MaxMembers></SliderControl>
                    </Control>
                </FormGroup>
            </div>
            <div class="navbar">
                <span class="button" onclick=@LeaveLobby title="Return to Main Menu">Leave Lobby</a>
            </div>
        </div>

        <div class="right">
            <div class="info">
                <h2>Song</h2>
                <LobbySongButton SongIdent=@SongIdent ></LobbySongButton>
                @if(SongIdent != "")
                {
                    <h2>Difficulty</h2>
                    @if(Game.Menu.Lobby.Owner.IsMe)
                    {
                        @foreach (var item in CurrentSong.Charts)
                        {
                            <span class="button" onclick=@(() => { Difficulty = item.Difficulty; DifficultyName = item.DifficultyName; SendUpdateDifficultyMessage(); })>@item.DifficultyName</span>
                        }
                    }
                }
                <h2>Players</h2>
                <div class="players">
                    @foreach(var player in Game.Menu.Lobby.Members)
                    {
                        <LobbyMember Member=@player></LobbyMember>
                    }
                </div>
            </div>
            @if(Game.Menu.Lobby.Owner.IsMe)
            {
                <span class="button" onclick=@StartGame>Start Game</span>
            }
        </div>
    </div>
</root>

@code
{
    public static LobbyMenuPage Current { get; set; }
    public string SongIdent { get; set; } = "";
    public int Difficulty { get; set; } = 0;

    protected Package HostPackage { get; set; }
    protected Song CurrentSong { get; set; }
    protected string SoundName { get; set; } = "";
    protected string DifficultyName { get; set; } = "";

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);

        if(firstTime)
        {
            Current = this;
        }
    }

    private void StartGameButton()
    {
        SendStartGameMessage();
        StartGame();
    }

    protected void StartGame()
    {
        this.Navigate("/game");
        GamePage.Current?.LoadSong(SongIdent, Difficulty);
    }

    private void SendStartGameMessage()
    {
        ByteStream data = ByteStream.Create(8 + (SongIdent.Length * 2));
        data.Write(LobbyMessages.START_GAME);
        data.Write(Difficulty);
        data.Write(SongIdent);
        Game.Menu.Lobby?.BroadcastMessage(data);
    }

    protected void SendUpdateDifficultyMessage()
    {
        ByteStream data = ByteStream.Create(8 + (SongIdent.Length * 2));
        data.Write(LobbyMessages.UPDATE_DIFFICULTY);
        data.Write(Difficulty);
        data.Write(DifficultyName);
        Game.Menu.Lobby?.BroadcastMessage(data);
    }

    public void LeaveLobby()
    {
        if(!Game.InGame) Game.Menu.Lobby.Leave();
        this.Navigate("/");
    }

    [GameEvent.Menu.LobbyJoined]
    private void OnLobbyJoined()
    {
        Game.Menu.Lobby.OnMemberEnter += OnMemberEnter;
        Game.Menu.Lobby.ReceiveMessages(OnNetworkMessage);
    }

    public void SetSong(string ident)
    {
        SongIdent = ident;

        ByteStream data = ByteStream.Create(4 + (SongIdent.Length * 2));
        data.Write(LobbyMessages.UPDATE_SONG);
        data.Write(SongIdent);
        if(!Game.InGame) Game.Menu.Lobby?.BroadcastMessage(data);

        LoadSong();
    }

    public async void LoadSong()
    {
        HostPackage = await Package.FetchAsync(SongIdent, false);
        var className = HostPackage.GetMeta("PrimaryAsset", "");
        if(string.IsNullOrEmpty(className))
        {
            Log.Warning("No PrimaryAsset found in song package");
            return;
        }
        await HostPackage.MountAsync(true);

        var type = TypeLibrary.GetType<Rhythm4KSong>(className);
        if(type == null)
        {
            Log.Warning($"PrimaryAsset {className} is not a Rhythm4KSong");
            LobbyMenuPage.Current?.LeaveLobby();
            return;
        }

        var r4ksong = type.Create<Rhythm4KSong>();
        if(!FileSystem.Mounted.FileExists(r4ksong.ChartPath))
        {
            Log.Warning($"Chart file {r4ksong.ChartPath} does not exist");
            LobbyMenuPage.Current?.LeaveLobby();
            return;
        }

        SoundName = r4ksong.SoundName;

        CurrentSong = SongBuilder.Load(r4ksong.ChartPath);
    }

    private void OnMemberEnter(Friend friend)
    {
        if(Game.Menu.Lobby.Owner.IsMe)
        {
            ByteStream data = ByteStream.Create(4 + (SongIdent.Length * 2));
            data.Write(LobbyMessages.UPDATE_SONG);
            data.Write(SongIdent);
            Game.Menu.Lobby?.SendMessage(friend, data);
        }
    }

    private void OnNetworkMessage(ILobby.NetworkMessage msg)
    {
        ByteStream data = msg.Data;

        var messageId = (LobbyMessages)data.Read<int>();
        
        switch(messageId)
        {
            // Update Song
            case LobbyMessages.UPDATE_SONG:
                SongIdent = data.Read<string>();
                LoadSong();
                break;

            // Update Difficulty
            case LobbyMessages.UPDATE_DIFFICULTY:
                Difficulty = data.Read<int>();
                DifficultyName = data.Read<string>();
                break;

            // Start Game
            case LobbyMessages.START_GAME:
                Difficulty = data.Read<int>();
                SongIdent = data.Read<string>();
                StartGame();
                break;
        }
    }
} *@