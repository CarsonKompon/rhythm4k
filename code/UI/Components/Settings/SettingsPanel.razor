@using System;
@using Sandbox;
@using Sandbox.UI;
@attribute [StyleSheet]
@inherits Panel

@namespace Rhythm4K

<root>
    
    @if(InKeybindsMenu)
    {
        <KeybindPanel />
        return;
    }

    <h1>General</h1>
    <div class="option">
        <label>Master Volume</label>
        <SliderControl Min=@(0f) Max=@(100f) Step=@(1f) ShowTextEntry=@(true) Value:bind=@GamePreferences.Settings.MasterVolume />
    </div>
    <div class="option">
        <label>Unfocused Volume</label>
        <SliderControl Min=@(0f) Max=@(100f) Step=@(1f) ShowTextEntry=@(true) Value:bind=@GamePreferences.Settings.UnfocusedVolume />
    </div>
    @* <div class="option">
        <label>Music Volume</label>
        <SliderControl Min=@(0f) Max=@(100f) Step=@(1f) ShowTextEntry=@(true) Value:bind=@GamePreferences.Settings.MusicVolume />
    </div>
    <div class="option">
        <label>SFX Volume</label>
        <SliderControl Min=@(0f) Max=@(100) Step=@(1f) ShowTextEntry=@(true) Value:bind=@GamePreferences.Settings.SoundVolume />
    </div> *@
    @if(ShowSetupWizard)
    {
        <button class="main" onclick=@RunSetupWizard>Run Setup Wizard</button>
    }
    <h1>Input</h1>
    <div class="option">
        <label>Key Bindings</label>
        <button onclick=@OpenKeybindMenu>Configure</button>
    </div>
    <div class="option">
        <label>Audio Offset</label>
        <LeftRightNumberControl Step=@(1) Suffix="ms" Value:bind=@GamePreferences.Settings.AudioLatency />
    </div>
    @if(ShowSetupWizard)
    {
        <button class="main" onclick=@GameManager.RunCalibrationWizard>Run Calibration Wizard</button>
    }
    <h1>Gameplay</h1>
    <div class="option">
        <label>Scroll Direction</label>
        <CustomDropDown @ref="ScrollDirectionDropDown" onchange=@OnScrollDirectionChanged />
    </div>
    <div class="option">
        <label>Scroll Speed Multiplier</label>
        <SliderControl Min=@(0.5f) Max=@(2) Step=@(0.05f) ShowTextEntry=@(true) Value:bind=@GamePreferences.Settings.ScrollSpeedMultiplier />
    </div>
    <h1>Graphics</h1>
    <div class="option">
        <label>Gameplay Style</label>
        <CustomDropDown @ref="GameplayStyleDropDown" onchange=@OnGameplayStyleChanged />
    </div>
    <div class="option">
        <label>Note Shape</label>
        <CustomDropDown @ref="NoteStyleDropDown" onchange=@OnNoteStyleChanged />
    </div>
    <div class="option">
        <label>Background Effects</label>
        <SwitchControl Value:bind=@GamePreferences.Settings.BackgroundEffects />
    </div>
    <div class="option">
        <label>Hit Effects</label>
        <SwitchControl Value:bind=@GamePreferences.Settings.HitEffects />
    </div>
    <div class="option">
        <label>Light Up Lanes</label>
        <SwitchControl Value:bind=@GamePreferences.Settings.LightUpLanes />
    </div>
    <h3>Lanes</h3>
    <div class="page-selector">
        <MainMenuButton class="@(PageSelected(0))" Text="1K" onclick=@(() => SelectPage(0))/>
        <MainMenuButton class="@(PageSelected(1))" Text="2K" onclick=@(() => SelectPage(1))/>
        <MainMenuButton class="@(PageSelected(2))" Text="3K" onclick=@(() => SelectPage(2))/>
        <MainMenuButton class="@(PageSelected(3))" Text="4K" onclick=@(() => SelectPage(3))/>
        <MainMenuButton class="@(PageSelected(4))" Text="5K" onclick=@(() => SelectPage(4))/>
        <MainMenuButton class="@(PageSelected(5))" Text="6K" onclick=@(() => SelectPage(5))/>
        <MainMenuButton class="@(PageSelected(6))" Text="7K" onclick=@(() => SelectPage(6))/>
        <MainMenuButton class="@(PageSelected(7))" Text="8K" onclick=@(() => SelectPage(7))/>
        <MainMenuButton class="@(PageSelected(8))" Text="9K" onclick=@(() => SelectPage(8))/>
        <MainMenuButton class="@(PageSelected(9))" Text="10K" onclick=@(() => SelectPage(9))/>
    </div>
    <div class="page-contents lanes">
        @for(int i=0; i<=LanePage; i++)
        {
            var lane = $"{LanePage + 1}K{i + 1}";
            <div class="option colors">
                <label>Lane @(i + 1) Colour</label>
                <div class="color-sliders">
                    <div class="color" style="background-color: @(GamePreferences.Settings.GetLaneColor(lane).Hex)" />
                    <div class="column">
                        <SliderControl Min=@(0) Max=@(360) Step=@(1f) Value:bind="@(GamePreferences.Settings.ColorHue[lane])" OnValueChanged=@((float val) => GamePreferences.Settings.SetLaneHue(lane, val)) class="hue" />
                        <SliderControl Min=@(0) Max=@(1) Step=@(0.001f) Value:bind="@(GamePreferences.Settings.ColorValue[lane])" OnValueChanged=@((float val) => GamePreferences.Settings.SetLaneValue(lane, val)) class="sat" />
                    </div>
                </div>
            </div>
        }
    </div>
</root>

@code
{
    public bool ShowSetupWizard { get; set; } = true;
    public bool InKeybindsMenu { get; set; } = false;

    CustomDropDown ScrollDirectionDropDown = new();
    CustomDropDown GameplayStyleDropDown = new();
    CustomDropDown NoteStyleDropDown = new();

    int LanePage = 3;
    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);

        if (firstTime)
        {
            ScrollDirectionDropDown.Options = new()
            {
                new Option("Upscroll", 0),
                new Option("Downscroll", 1),
            };
            ScrollDirectionDropDown.Selected = ScrollDirectionDropDown.Options[GamePreferences.Settings.Downscroll ? 1 : 0];
        
            GameplayStyleDropDown.Options = new()
            {
                new Option("2D", 0),
                new Option("3D", 1),
            };
            GameplayStyleDropDown.Selected = GameplayStyleDropDown.Options[GamePreferences.Settings.GameStyle];
        
            if(NoteStyleDropDown is not null)
            {
                List<Option> options = new();
                foreach(var enumName in Enum.GetNames(typeof(NoteStyle)))
                {
                    options.Add(new Option(enumName, (int)Enum.Parse<NoteStyle>(enumName)));
                }
                NoteStyleDropDown.Options = options;
                NoteStyleDropDown.Selected = NoteStyleDropDown.Options[(int)GamePreferences.Settings.NoteStyle];
            }
        }
    }

    void RunSetupWizard()
    {
        MainMenuScreen.Instance.InSetupWizard = true;
    }

    void OnScrollDirectionChanged()
    {
        GamePreferences.Settings.Downscroll = (int)ScrollDirectionDropDown.Selected.Value == 1;
    }

    void OnGameplayStyleChanged()
    {
        GamePreferences.Settings.GameStyle = (int)GameplayStyleDropDown.Selected.Value;
    }

    void OnNoteStyleChanged()
    {
        GamePreferences.Settings.NoteStyle = (NoteStyle)NoteStyleDropDown.Selected.Value;
    }

    void OpenKeybindMenu()
    {
        Game.Overlay.ShowBinds();
        @* InKeybindsMenu = true; *@
    }

    string PageSelected(int i)
    {
        if(i == LanePage)
        {
            return "selected";
        }
        return "";
    }

    void SelectPage(int i)
    {
        LanePage = i;
    }

    protected override int BuildHash() => System.HashCode.Combine(InKeybindsMenu, LanePage);
}