@using System;
@using Sandbox;
@using Sandbox.UI;
@using System.IO;
@using System.IO.Compression;
@using System.Threading.Tasks;
@using Rhythm4K.Osu;
@using Rhythm4K.Chorus;
@inherits Panel
@attribute [StyleSheet]

@namespace Rhythm4K

<root class="@(Downloading ? "" : "hide")">
    <div class="background" />
    <span @ref="CoverImage" class="image">
		<span class="overlay downloading">Downloading <i>cached</i></span>
	</span>
</root>

@code
{
    public static SongDownloadPanel Instance { get; set; }

    public bool Downloading { get; private set; } = false;

    Panel CoverImage { get; set; }
    string CoverUrl { get; set; }

    static List<DownloadEntry> DownloadQueue = new List<DownloadEntry>();

    public class DownloadEntry
    {
        public OsuBeatmapSet OsuBeatmap = null;
        public ChorusBeatmap ChorusBeatmap = null;
        public string CoverUrl;

        public DownloadEntry(OsuBeatmapSet beatmap, string coverUrl)
        {
            OsuBeatmap = beatmap;
            CoverUrl = coverUrl;
        }

        public DownloadEntry(ChorusBeatmap beatmap)
        {
            ChorusBeatmap = beatmap;
        }
    }

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);
        Instance = this;
    }

    public override void Tick()
    {
        base.Tick();

        if (DownloadQueue.Count > 0 && !Downloading)
        {
            var entry = DownloadQueue[0];
            DownloadQueue.RemoveAt(0);
            DownloadBeatmap(entry);
        }
    }

    public async Task QueueOsuDownload(int beatmapId)
    {
        if(BeatmapSet.All.Any(x => x.Path.StartsWith("beatmaps/downloads-beatconnect/" + beatmapId.ToString()))) return;
        OsuBeatmapSet beatmapSet = await Http.RequestJsonAsync<OsuBeatmapSet>("https://beatconnect.io/api/beatmap/" + beatmapId.ToString() + $"?token={OsuPage.TOKEN}");
        if(beatmapSet is not null)
        {
            var coverUrl = "";
            if(beatmapSet.Covers.TryGetValue("cover", out var coverImage))
			{
				coverUrl = coverImage.ToString();
			}
            QueueOsuDownload(beatmapSet, coverUrl);
        }
    }

    public void QueueOsuDownload(OsuBeatmapSet beatmap, string coverUrl)
    {
        if(beatmap.IsDownloaded()) return;
        DownloadQueue.Add(new DownloadEntry(beatmap, coverUrl));
    }

    public void QueueChorusDownload(ChorusBeatmap beatmap)
    {
        if(beatmap.IsDownloaded()) return;
        DownloadQueue.Add(new DownloadEntry(beatmap));
    }

    public void DownloadBeatmap(DownloadEntry entry)
	{
        if(entry.OsuBeatmap is not null)
        {
            DownloadOsuBeatmap(entry.OsuBeatmap, entry.CoverUrl);
        }
        else if(entry.ChorusBeatmap is not null)
        {
            DownloadChorusBeatmap(entry.ChorusBeatmap);
        }
    }

    public async void DownloadOsuBeatmap(OsuBeatmapSet beatmapSet, string coverUrl)
    {
        if(beatmapSet.IsDownloaded())
		{
			return;
		}

		if (Downloading)
		{
			Log.Info("You can only download one map at a time");
			return;
		}
        
        if(beatmapSet.Covers.TryGetValue("cover", out var coverImage))
        {
            CoverUrl = coverImage.ToString();
            CoverImage.Style.SetBackgroundImage(CoverUrl);
        }
		Log.Info("Downloading beatmap \"" + beatmapSet.Title + "\"...");
		Downloading = true;

		// Get the bytes of the file
		string url = "https://beatconnect.io/b/" + beatmapSet.Id.ToString() + "/";
		if (beatmapSet.UniqueId is not null) url += beatmapSet.UniqueId.ToString();
		else url += "null";
		@* url += "?novideo=1"; *@
		Log.Info("downloading from url:");
		Log.Info(url);

        byte[] fileData = await Http.RequestBytesAsync(url);
        try
        {
            ZipArchive archive = new ZipArchive(new MemoryStream(fileData));

            // Save the contents of the archive
            string dir = $"beatmaps/downloads-beatconnect/{beatmapSet.GetFullSongId()}";
            FileSystem.Data.CreateDirectory(dir);
            int idd = 0;
            foreach (var entry in archive.Entries)
            {
                string path = dir + "/" + entry.FullName;
                if (path.Trim().EndsWith(".osu"))
                {
                    path = path.Insert(path.Length - 4, "-" + idd.ToString());
                    idd++;
                }
                Log.Info("Saving file " + path);
                Stream zipStream = entry.Open();
                Stream fileStream = FileSystem.Data.OpenWrite(path);
                await zipStream.CopyToAsync(fileStream);
                fileStream.Close();
                zipStream.Close();
            }
            FileSystem.Data.WriteAllText(dir + "/cover-image.txt", coverUrl);

            await BeatmapSet.Load(dir);
        }
        catch (Exception e)
        {
            Log.Error(e.Message);
            Log.Error(e.StackTrace);
        }
        finally
        {
            if(Descendants.Where(x => x is OsuButton btn && btn.BeatmapSet == beatmapSet).FirstOrDefault() is OsuButton button)
            {
                button.Downloading = false;
            }
            Downloading = false;
        }
    }

    public async void DownloadChorusBeatmap(ChorusBeatmap beatmap)
    {
        if(beatmap.IsDownloaded()) return;

        Dictionary<string, string> headers = new Dictionary<string, string>
        {
            { "Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8" }
        };
        string url = $"https://www.enchor.us/download?md5={beatmap.Md5}&isSng=false&filename={beatmap.GetFullSongId()}";
        byte[] fileData = await Http.RequestBytesAsync(url, "GET", null, headers);
        try
        {
            Log.Info(fileData);
            FileSystem.Data.OpenWrite("test.zip").Write(fileData);
            ZipArchive archive = new ZipArchive(new MemoryStream(fileData), ZipArchiveMode.Read);

            // Save the contents of the archive
            string dir = $"beatmaps/downloads-enchorus";
            FileSystem.Data.CreateDirectory(dir);
            foreach (var entry in archive.Entries)
            {
                string path = dir + "/" + entry.FullName;
                Log.Info("Saving file " + path);
                Stream zipStream = entry.Open();
                Stream fileStream = FileSystem.Data.OpenWrite(path);
                await zipStream.CopyToAsync(fileStream);
                fileStream.Close();
                zipStream.Close();
            }

            string coverArt = beatmap?.AlbumArtMd5?.ToString() ?? "";
			if(!string.IsNullOrEmpty(coverArt))
			{
                FileSystem.Data.WriteAllText(dir + "/cover-image.txt", $"https://files.enchor.us/{coverArt}.jpg");
            }

            await BeatmapSet.Load(dir);
        }
        catch (Exception e)
        {
            Log.Error(e.Message);
            Log.Warning(e.StackTrace);
        }
        finally
        {
            if(Descendants.Where(x => x is ChorusButton btn && btn.BeatmapSet.Md5 == beatmap.Md5).FirstOrDefault() is OsuButton button)
            {
                button.Downloading = false;
            }
            Downloading = false;
        }
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(Downloading, CoverUrl);
    }
}