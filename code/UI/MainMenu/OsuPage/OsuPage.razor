@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.IO;
@using System.IO.Compression;
@using Sandbox;
@using Sandbox.UI;
@using Sandbox.UI.GameMenu;
@inherits Panel
@attribute [StyleSheet]

@namespace Rhythm4K.Osu

<root>
    <div class="background" />
    <div class="navbar">
        <div class="buttons">
            <a class="button" href="/play"> &lt; Back</a>
        </div>

        <div class="search">
            <CustomDropDown @ref="StatusDropDown" onchange=@Search />
            <TextEntry onsubmit=@Search Value:bind=@SearchText Tooltip="Search for songs by title, artist, or URL" Placeholder="Enter a search query..." ></TextEntry>
            <span class="button" onclick=@Search>Search</span>
        </div>
    </div>

    <div class="content">
        @if(Loading)
        {
            <span class="loading">Loading...</span>
        }
        else
        {
            @foreach(var beatmap in LoadedBeatmaps)
            {
                <OsuButton BeatmapSet=@beatmap />
            }
            @if(LoadedBeatmaps.Count() > 0 && Page < MaxPages)
            {
                <span class="load-more" onclick=@LoadMoreBeatmaps>Load more...</span>
            }
        }
    </div>
</root>

@code
{
	public List<OsuBeatmapSet> LoadedBeatmaps { get; set; } = new List<OsuBeatmapSet>();
	public string SearchText { get; set; } = "";
	public int Page { get; set; } = 0;
	public int MaxPages { get; set; } = 0;
	public bool Loading { get; private set; } = false;

    CustomDropDown StatusDropDown { get; set; }

    private string lastQuery = "";
    public const string TOKEN = "afa1dc64301e47aab7f21ab65d6a7b4c";
    private const string BASE_QUERY = $"https://beatconnect.io/api/search/?&m=mania&diff_range=0-10&token={TOKEN}";

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);

        if (firstTime)
        {
            LoadTopBeatmaps();

            StatusDropDown.Options = new()
            {
                new Option("All", 0),
                new Option("Ranked", 1),
                @* new Option("Approved", 2), *@
                new Option("Qualified", 2),
                new Option("Loved", 3),
                new Option("Unranked", 4),
            };
            StatusDropDown.Selected = StatusDropDown.Options[1];
        }
    }
    
    private async void Search()
    {
        Loading = true;
        lastQuery = BASE_QUERY + "&s=" + StatusDropDown.Selected.Title.ToString().ToLower() + "&q=" + SearchText;
        Log.Info(lastQuery);
        var response = await Http.RequestJsonAsync<OsuSearch>(lastQuery);
        LoadedBeatmaps = response.BeatmapSets;
        MaxPages = response.MaxPage;
        Page = 0;
        Loading = false;
    }

    private async void LoadTopBeatmaps()
    {
        Loading = true;
        lastQuery = BASE_QUERY;
        var response = await Http.RequestJsonAsync<OsuSearch>(lastQuery);
        LoadedBeatmaps = response.BeatmapSets;
        MaxPages = response.MaxPage;
        Page = 0;
        Loading = false;
    }

    private async void LoadMoreBeatmaps()
    {
        Page++;
        var response = await Http.RequestJsonAsync<OsuSearch>(lastQuery + "&p=" + Page.ToString());
        LoadedBeatmaps.AddRange(response.BeatmapSets);
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(Loading, LoadedBeatmaps.Count());
    }
}
