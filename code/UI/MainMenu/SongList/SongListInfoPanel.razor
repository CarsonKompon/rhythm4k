@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

@namespace Rhythm4K

<root>
	@if(BeatmapSet.All.Count > 0)
	{
		var set = BeatmapSet.All[Index];
		var list = set.Beatmaps.OrderBy(x => x.Difficulty).ToList();
		<div class="cover-art">
			<img src=@set.CoverArt />
			<div class="info">
				<h1>@set.Name</h1>
				<h3 class="artist">@set.Artist</h3>
			</div>
		</div>
		<div class="extras @(SelectedIndex >= 0 ? "" : "hidden")">
			@if(SelectedIndex >= 0)
			{
				var chart = list.ElementAt(SelectedIndex);
				<div class="extra">
					<i>access_time</i>
					<label>@chart.GetSongLength()</label>
				</div>
				<div class="extra">
					<i>piano</i>
					<label>@chart.Lanes</label>
				</div>
				<div class="extra">
					<i>music_note</i>
					<label>@chart.Notes.Count</label>
				</div>
			}
		</div>
		<div class="chart-list">
			@foreach(var chart in list)
			{
				var index = list.IndexOf(chart);
				<div class="chart @(index == SelectedIndex ? "selected" : "")" onclick=@(() => SelectButton(index))>
					<div class="info">
						<h3>@(!string.IsNullOrEmpty(chart.DifficultyName) ? chart.DifficultyName : (!string.IsNullOrEmpty(chart.Name) ? chart.Name : "Unknown"))</h3>
						<h4>by @(!string.IsNullOrEmpty(chart.Charter) ? chart.Charter : "Unknown")</h4>
					</div>
					<div class="difficulty">@chart.Difficulty</div>
				</div>
			}
		</div>
		<div class="buttons">
			<MainMenuButton Text="Back" onclick=@BackButton class="back"/>
			<MainMenuButton Text="Play" onclick=@PlayButton class=@(SelectedIndex == -1 ? "disabled" : "")/>
		</div>
	}
	else
	{
		<div class="no-charts">
			<label>You have no Beatmaps...</label>
			<div class="buttons">
				<MainMenuButton Text="Back" onclick=@BackButton class="back"/>
			</div>
		</div>
	}
</root>

@code
{
	public static SongListInfoPanel Instance { get; private set; }
	public int Index
	{
		get
		{
			var index = SongListCarousel.Instance.SelectedIndex;
			var count = BeatmapSet.All.Count;
			if(count == 0) return 0;
			while(index < 0)
			{
				index += count;
			}
			return index % count;
		}
	}
	public static int SelectedIndex = 0;
	static TimeSince timeSinceLastSelection = 0;
	static bool playingSong = false;

	protected override void OnStart()
	{
		Instance = this;
	}

	protected override void OnUpdate()
	{
		if(!playingSong && timeSinceLastSelection > 0.25f && BeatmapSet.All.Count > 0)
		{
			var set = BeatmapSet.All[Index];
			var list = set.Beatmaps.OrderBy(x => x.Difficulty).ToList();
			var chart = list.ElementAt(SelectedIndex);
			MainMenuScreen.Instance.PlaySong(chart);
			playingSong = true;
		}
	}

	void PlayButton()
	{
		if(SelectedIndex == -1)
			return;

		var set = BeatmapSet.All[Index];
		var list = set.Beatmaps.OrderBy(x => x.Difficulty).ToList();
		MainMenuScreen.Instance.FadeToPlay(list.ElementAt(SelectedIndex));
	}

	void BackButton()
	{
		MainMenuScreen.Instance?.Navigate("/play");
	}

	void SelectButton(int index)
	{
		if(SelectedIndex == index)
		{
			Instance?.PlayButton();
			return;
		}
		Select(index);
	}

	public static void Select(int index)
	{
		SelectedIndex = index;
		timeSinceLastSelection = 0;
		playingSong = false;
	}

	protected override int BuildHash() => System.HashCode.Combine( Index, SelectedIndex );
}