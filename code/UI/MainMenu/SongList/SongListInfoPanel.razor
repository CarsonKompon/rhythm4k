@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

@namespace Rhythm4K

<root>
	@if (true)
	{
		var all = SongListCarousel.Instance.CurrentSetList;
		@if (all.Count > 0)
		{
			var set = all[Index];
			var list = set.Beatmaps.OrderBy(x => x.Difficulty).ToList();
			<div class="cover-art">
				@if (!string.IsNullOrEmpty(set.CoverArt) && set.CoverArt.StartsWith("http"))
				{
					<img src="@set.CoverArt" />
				}
				else
				{
					<Image Texture=@set.GetCoverTexture() />
				}
				@if (SelectedIndex >= 0)
				{
					<LeaderboardPanel Beatmap=@list.ElementAt(SelectedIndex) />
				}
				<div class="info">
					<h1>@set.Name</h1>
					<h3 class="artist">@set.Artist</h3>
				</div>
			</div>
			<div class="extras @(SelectedIndex >= 0 ? "" : "hidden")">
				@if (SelectedIndex >= 0)
				{
					var selectedChart = list.ElementAt(SelectedIndex);
					var highscore = selectedChart.GetHighscore();
					<div class="extra">
						<label>‚åö</label>
						<label>@selectedChart.GetSongLength()</label>
					</div>
					<div class="extra">
						<label>üéπ</label>
						<label>@selectedChart.Lanes</label>
					</div>
					<div class="extra">
						<label>üéµ</label>
						<label>@selectedChart.Notes.Count</label>
					</div>
					@if (highscore > 0)
					{
						<div class="fill" />
						<div class="extra">
							<label>üèÜ</label>
							<label>@($"{highscore:n0}")</label>
						</div>
					}
				}
			</div>
			<div class="chart-list">
				@foreach (var chart in list)
				{
					var index = list.IndexOf(chart);
					<div class="chart @(index == SelectedIndex ? "selected" : "")" onclick=@(() => SelectButton(index))>
						<div class="info">
							<label class="name">@(!string.IsNullOrEmpty(chart.DifficultyName) ? chart.DifficultyName : (!string.IsNullOrEmpty(chart.Name) ? chart.Name : "Unknown"))</label>
							<label class="author">by @(!string.IsNullOrEmpty(chart.Charter) ? chart.Charter : "Unknown")</label>
						</div>
						@if (chart.GetHighscore() > 0)
						{
							<label>üåü</label>
						}
						<div class="difficulty">@chart.Difficulty</div>
					</div>
				}
			</div>
			<div class="buttons">
				<MainMenuButton Text="Back" onclick=@BackButton class="back" />
				<MainMenuButton Text="Play" onclick=@PlayButton class=@(SelectedIndex == -1 ? "disabled" : "") />
			</div>
		}
		else
		{
			<div class="no-charts">
				@if (BeatmapSet.All.Count > 0)
				{
					<label>No chart selected...</label>
				}
				else
				{
					<label>You have no Beatmaps...</label>
				}
				<div class="buttons">
					<MainMenuButton Text="Back" onclick=@BackButton class="back" />
				</div>
			</div>
		}
	}
</root>

@code
{
	public static SongListInfoPanel Instance { get; private set; }
	public int Index
	{
		get
		{
			var index = SongListCarousel.Instance.SelectedIndex;
			var count = SongListCarousel.Instance.CurrentSetList.Count;
			if (count == 0) return 0;
			while (index < 0)
			{
				index += count;
			}
			return index % count;
		}
	}
	public static int SelectedIndex = 0;
	static TimeSince timeSinceLastSelection = 0;
	static bool playingSong = false;

	protected override void OnStart()
	{
		Instance = this;
	}

	protected override void OnUpdate()
	{
		if (Index < 0 || Index >= SongListCarousel.Instance.CurrentSetList.Count)
			return;

		if (!playingSong && timeSinceLastSelection > 0.25f && BeatmapSet.All.Count > 0)
		{
			var set = SongListCarousel.Instance.CurrentSetList[Index];
			var list = set.Beatmaps.OrderBy(x => x?.Difficulty).ToList();
			var chart = list.ElementAt(SelectedIndex);
			MainMenuScreen.Instance.PlaySong(chart);
			playingSong = true;
		}
	}

	void PlayButton()
	{
		if (SelectedIndex == -1)
			return;
		if (Index < 0 || Index >= SongListCarousel.Instance.CurrentSetList.Count)
			return;

		var set = SongListCarousel.Instance.CurrentSetList[Index];
		var list = set.Beatmaps.OrderBy(x => x.Difficulty).ToList();
		MainMenuScreen.Instance.FadeToPlay(list.ElementAt(SelectedIndex));
	}

	void BackButton()
	{
		MainMenuScreen.Instance?.Navigate("/play");
	}

	void SelectButton(int index)
	{
		if (SelectedIndex == index)
		{
			Instance?.PlayButton();
			return;
		}
		Select(index);
	}

	public static void Select(int index)
	{
		SelectedIndex = index;
		timeSinceLastSelection = 0;
		playingSong = false;
	}

	protected override int BuildHash() => System.HashCode.Combine(Index, SelectedIndex, SongListCarousel.Instance?.SortOrder);
}