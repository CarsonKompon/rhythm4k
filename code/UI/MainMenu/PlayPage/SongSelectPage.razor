@using System;
@using Sandbox;
@using Sandbox.UI;
@inherits Panel
@attribute [StyleSheet]

@namespace Rhythm4K

<root>
    <div class="header">
        <div class="tab @PageClass(0)" onclick=@(() => ClickOrder(0))>Date Added</div>
        <div class="tab @PageClass(1)" onclick=@(() => ClickOrder(1))>Artist</div>
        <div class="tab @PageClass(2)" onclick=@(() => ClickOrder(2))>Title</div>
        <div class="tab @PageClass(3)" onclick=@(() => ClickOrder(3))>Last Played</div>
        <div class="tab @PageClass(4)" onclick=@(() => ClickOrder(4))>Highscore</div>
        <div class="tab @PageClass(5)" onclick=@(() => ClickOrder(5))>Length</div>
    </div>
    <div class="scroll-bar" @ref="ScrollPanel" onmousedown=@ScrollDrag>
        <div class="bar" @ref="ScrollBar" style=@($"top: {ScrollBarPosition}%") />
    </div>
</root>

@code
{

    string PageClass(int order) => (SongListCarousel.Instance.SortOrder == order) ? "selected" : "";

    Panel ScrollPanel;
    Panel ScrollBar;

    float ScrollBarPosition = 0;
    bool IsDragging = false;

    void ClickOrder(int order)
    {
        SongListCarousel.Instance.SortOrder = order;
    }

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);

        if (firstTime)
        {
            ButtonInput = PanelInputType.Game;
            ScrollPanel.ButtonInput = PanelInputType.Game;
            ScrollBar.ButtonInput = PanelInputType.Game;
        }
    }

    public override void Tick()
    {
        base.Tick();
        Log.Info(Input.Down("Click"));

        if (SongListInfoPanel.Instance is null) return;
        var list = SongListCarousel.Instance?.CurrentSetList;
        if (list is null) return;

        if (IsDragging)
        {
            SetScrollPos();
            if (!Input.Down("Click"))
                IsDragging = false;
        }

        ScrollBarPosition = ScrollBarPosition.LerpTo(SongListInfoPanel.Instance.Index / (float)(list.Count - 1) * 90, 8f * Time.Delta);
    }

    void ScrollDrag()
    {
        IsDragging = true;
        SetScrollPos();
    }

    protected override void OnMouseMove(MousePanelEvent e)
    {
        base.OnMouseMove(e);

        if (!IsDragging) return;
        SetScrollPos();
    }

    void SetScrollPos()
    {
        SongListCarousel.Instance.SelectedIndex = (int)MathF.Round(MathX.Remap(Mouse.Position.y / Screen.Height, 0.05f, 0.95f, 0, SongListCarousel.Instance.CurrentSetList.Count - 1));
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(SongListCarousel.Instance?.SortOrder, SongListInfoPanel.Instance?.Index, SongListCarousel.Instance?.CurrentSetList?.Count, ScrollBarPosition);
    }

}