@using System;
@using System.Collections.Generic;
@using Sandbox;
@using Sandbox.Audio;
@using Sandbox.UI;
@namespace Rhythm4K
@implements IMusicPlayer
@inherits PanelComponent

<root>
    <MainMenu @ref="MainMenu" />
	<SongDownloadPanel />
	@if((MainMenu?.CurrentUrl ?? "") == "/")
	{
		<div class="now-playing">
			<i>music_note</i>
			<div class="info">
				<label class="title">@(CurrentSong is null ? ("Rhythm4K Menu") : CurrentSong.Name</label>
				<label class="artist">@(CurrentSong is null ? ("Carson Kompon") : CurrentSong.Artist</label>
			</div>
		</div>
	}
	<div class="loading-in @(LoadingIn ? "" : "hidden")">
		@if(Beatmap.Loaded is not null)
		{
			var chart = Beatmap.Loaded;
			var set = chart.GetBeatmapSet();
			<div class="set-info">
				<label class="name">@set.Name</label>
				<label class="artist">@set.Artist</label>
			</div>
			<div class="cover-art">
				<img class="cover-art" src="@set.CoverArt" />
				<i class="loading">refresh</i>
			</div>
			<div class="chart-info">
				<label class="difficulty-name">@chart.DifficultyName</label>
				<div class="difficulty">
					<i>star</i>
					<label>@chart.Difficulty</label>
				</div>
			</div>
			<div class="extra-info">
				<div class="info">
					<label class="title">Source</label>
					<label>osu!mania</label>
				</div>
				<div class="info">
					<label class="title">Mapper</label>
					<label>@chart.Charter</label>
				</div>
			</div>
		}
	</div>
</root>

@code
{
	public static MainMenuScreen Instance { get; private set; }
	public static string StartingUrl { get; set; } = "";

	[Property] public SceneFile SingleplayerScene { get; set; }
	MainMenu MainMenu { get; set;}

	public string CurrentUrl => MainMenu?.CurrentUrl ?? "";
	public bool LoadingIn { get; set; } = false;
	TimeSince TimeSinceLoadingIn = 0f;

	Beatmap CurrentSong;
	public MusicPlayer Music { get; set; }
	TimeSince TimeSinceLastSong = 0;

	public ReadOnlySpan<float> Spectrum => (Music is null) ? null : Music.Spectrum;
	[Property] public Action OnBeat { get; set; }
	[Property] public float PeakThreshold { get; set; } = 1.08f;
    public float AdjustedPeakThreshold { get; private set; } = 0f;

	public bool IsPeaking { get; set; } = false;
	public float Energy { get; set; } = 0f;
    public float EnergyHistoryAverage { get; set; } = 0f;
    public float PeakKickVolume { get; set; } = 0f;
    List<float> EnergyHistory = new();

	protected override void OnStart()
	{
		base.OnStart();

		Instance = this;
		
		LoadSongs();
		PlayRandomSong();
	}

	protected override void OnTreeFirstBuilt()
	{
		if(!string.IsNullOrEmpty(StartingUrl))
		{
			Navigate(StartingUrl);
			MainMenuCameraManager.Instance.SetTarget(StartingUrl, true);
			StartingUrl = "";
		}
	}

	async void LoadSongs()
	{
		if(string.IsNullOrEmpty(StartingUrl)) Beatmap.Loaded = null;
		if(BeatmapSet.All.Count == 0)
		{
			await BeatmapSet.LoadAll();
		}
	}

	AudioProcessor FilterProcessor;

	protected override void OnEnabled()
	{
		Mixer.Master.ClearProcessors();
		var allProcessors = TypeLibrary.GetTypes<AudioProcessor>();
		foreach(var processor in allProcessors)
		{
			if(processor.Name == "LowPassProcessor")
			{
				Mixer.Master.AddProcessor(TypeLibrary.Create<AudioProcessor>(processor.TargetType));
				FilterProcessor = Mixer.Master.GetProcessors().FirstOrDefault();
			}
		}
	}

	protected override void OnDestroy()
	{
		Music?.Stop();
		Music?.Dispose();
		if(FilterProcessor is not null)
		{
			FilterProcessor.Mix = 0f;
		}
		Mixer.Master.Volume = 1f;
	}
	protected override void OnUpdate()
	{
		base.OnUpdate();

		if(LoadingIn)
		{
			if(Input.EscapePressed)
			{
				Beatmap.Loaded = null;
				LoadingIn = false;
			}
			else if(TimeSinceLoadingIn > 2f)
			{
				Scene.Load(SingleplayerScene);
			}

			if(FilterProcessor is not null)
			{
				FilterProcessor.Mix = FilterProcessor.Mix.LerpTo(0.8f, Time.Delta * 2f);
			}
			Mixer.Master.Volume = Mixer.Master.Volume.LerpTo(0f, Time.Delta * 2f);
		}
		else
		{
			if(FilterProcessor is not null)
			{
				FilterProcessor.Mix = FilterProcessor.Mix.LerpTo(0f, Time.Delta * 20f);
			}	
			Mixer.Master.Volume = Mixer.Master.Volume.LerpTo(GamePreferences.Settings.MasterVolume / 100f, Time.Delta * 10f);
		
			if(Input.EscapePressed)
			{	
				if(MainMenu.CurrentUrl == "/song-select") Navigate("/play");
				else if(MainMenu.CurrentUrl == "/play") Navigate("/");
				else if(MainMenu.CurrentUrl == "/settings")
				{
					GamePreferences.SaveSettings();
					Navigate("/");
				}
				else if(MainMenu.CurrentUrl == "/browse") Navigate("/play");
			}

			if(TimeSinceLastSong > Music.Duration + 2f)
			{
				PlayRandomSong();
				TimeSinceLastSong = 0;
			}
		}

		if(Music is null) return;
		Music.Position = Scene.Camera.Transform.Position;
		Music.Volume = Music.Volume.LerpTo(1f, Time.Delta * 2f);

		var spectrum = Music.Spectrum;
		if(spectrum.Length <= 0) return;

        // Energy Calculations
        var energy = 0f;
        float length = spectrum.Length;
        for ( int i = 0; i < length; i++ )
        {
            energy += spectrum[i];
        }
        energy /= length;
        Energy = Energy.LerpTo( energy, Time.Delta * 30f );

        EnergyHistory.Add( energy );
        if ( EnergyHistory.Count > 64 ) EnergyHistory.RemoveAt( 0 );

        // Energy History Average
        EnergyHistoryAverage = 0f;
        for ( int i = 0; i < EnergyHistory.Count; i++ )
        {
            EnergyHistoryAverage += EnergyHistory[i];
        }
        EnergyHistoryAverage /= EnergyHistory.Count;

        // Beat Detection
        float energySum = 0f;
        foreach ( var energyValue in EnergyHistory )
        {
            energySum += energyValue;
        }
        float energyMean = energySum / EnergyHistory.Count;

        float variance = 0f;
        foreach ( var energyValue in EnergyHistory )
        {
            variance += (energyValue - energyMean) * (energyValue - energyMean);
        }
        float energyStdDev = (float)Math.Sqrt( variance / EnergyHistory.Count );

        // Adjusted Peak Threshold Calculation
        AdjustedPeakThreshold = PeakThreshold * energyStdDev;

        if ( EnergyHistoryAverage > 0.05f && Energy > EnergyHistoryAverage + AdjustedPeakThreshold )
        {
            if ( !IsPeaking )
            {
                OnBeat?.Invoke();
            }
            IsPeaking = true;
        }
        else
        {
            IsPeaking = false;
        }
	}

	void PlayRandomSong()
	{
		Music?.Stop();
		Music?.Dispose();
		var set = BeatmapSet.All.OrderBy(x => System.Guid.NewGuid() ).FirstOrDefault();
		if(set is null || System.Random.Shared.Float() < 0.1)
		{
			Music = MusicPlayer.Play(FileSystem.Mounted, "sounds/music/menu-music.mp3");
			CurrentSong = null;
		}
		else
		{
			CurrentSong = set.Beatmaps.OrderBy(x => System.Guid.NewGuid()).FirstOrDefault();
			Beatmap.Loaded = CurrentSong;
			Music = MusicPlayer.Play(FileSystem.Data, set.Path + "/" + CurrentSong.AudioFilename);
		}
		TimeSinceLastSong = 0;
	}

	public void PlaySong(Beatmap beatmap)
	{
		var song = beatmap.GetBeatmapSet();
		var currentPath = (CurrentSong is null) ? "" : (CurrentSong.GetBeatmapSet().Path + "/" + CurrentSong.AudioFilename);
		var newPath = song.Path + "/" + beatmap.AudioFilename;
		
		if(currentPath == newPath) return;
		CurrentSong = beatmap;
		Music?.Stop();
		Music?.Dispose();
		Music = MusicPlayer.Play(FileSystem.Data, newPath);
		if(SongListInfoPanel.Instance.GameObject.Enabled)
		{
			Log.Info("this log is necessary for music to seek to the right time...");
			Music.Seek(MathF.Max(beatmap.SampleStart, 0f));
		}
		Music.Volume = 0f;
		TimeSinceLastSong = 0;
	}

	public void FadeToPlay(Beatmap beatmap)
	{
		Beatmap.Loaded = beatmap;
        LoadingIn = true;
		TimeSinceLoadingIn = 0f;
	}

	public void Navigate(string destination)
	{
		MainMenu?.Navigate(destination);
	}

	protected override int BuildHash()
    {
        return System.HashCode.Combine(LoadingIn, CurrentSong);
    }
}