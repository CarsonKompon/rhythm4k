@using System;
@using System.Linq;
@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

@namespace Rhythm4K

<root>
	@if(Index < 0 || Index >= BeatmapSet.All.Count()) return;
	<img src="@Set.CoverArt" class="cover" />
	<div class="info">
		<div class="title">@(Set.Name)</div>
		<div class="subtitle">
			<label class="artist">@(Set.Artist)</label>
			<label class="score">0000000</label>
		</div>
	</div>
</root>

@code
{
	public int Index { get; set; } = -1;
	public BeatmapSet Set => BeatmapSet.All[Index];

	bool Grabbing = false;
	Vector2 GrabPos = Vector2.Zero;

	protected override void OnUpdate()
	{
		base.OnUpdate();

		if(Grabbing)
		{
			var drag = Mouse.Position - GrabPos;

			var carousel = SongListCarousel.Instance;
			carousel.AngleOffset = -drag.y / 360f;
			if ( MathF.Abs( carousel.LastOffset - carousel.AngleOffset ) >= MathF.PI * 2f / (float)carousel.SongPanelCount )
			{
				Sound.Play( "ui_hover" );
				carousel.LastOffset = carousel.AngleOffset;
				carousel.LockOffset();
				GrabPos = Mouse.Position;
			}

			if(!Input.Down("click"))
			{
				if(drag.Length < 16)
				{
					// Clicked
					Click();
				}
				carousel.LockOffset();
				Grabbing = false;
			}
		}
	}

	public void Click()
	{
		int index = SongListCarousel.Instance.SelectedIndex;
		int count = BeatmapSet.All.Count();
		while(index < 0)
		{
			index += count;
		}
		index = index % count;
		if(index != Index)
		{
			Log.Info($"Selected {index} (from {Index}) with diff {index - Index}");
			var diff = index - Index;
			if(Math.Abs(diff) > count / 2)
			{
				diff = diff > 0 ? diff - count : diff + count;
			}
			SongListCarousel.Instance.SelectedIndex -= diff;
			Sound.Play( "ui_select" );
		}
		else
		{
			Sound.Play( "ui_back" );
		}
	}

	public void Grab()
	{
		GrabPos = Mouse.Position;
		Grabbing = true;
	}

	protected override int BuildHash() => System.HashCode.Combine( Index, SongListCarousel.Instance.SelectedIndex );
}