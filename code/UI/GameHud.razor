@using System;
@using Sandbox;
@using Sandbox.UI;
@using Sandbox.UI.Construct;
@inherits PanelComponent

@namespace Rhythm4K

<root>
	<div class="score">@MathF.Round(GameManager.Score).ToString("0000000")</div>
	<div class="combo">
		<h1>Combo</h1>
		<p @ref="ComboPanel"></p>
	</div>
	<div class="judgement" @ref="JudgementPanel"></div>
	<div class="song-progress">
		<div class="fill" style="width: @(GameManager.CurrentTimeNoLatency / GameManager.Beatmap.Length * 100f)%"></div>
	</div>
	<div class="pause-menu @(GameManager.Instance.IsPaused ? "" : "hidden")">
		<h1>Paused</h1>
		<div class="options">
			<div class="button" onclick=@ContinueButton>Continue</div>
			<div class="button"onclick=@RetryButton>Retry</div>
			<div class="button"onclick=@QuitButton>Quit</div>
		</div>
		<div class="info">
			<label>Retry Count: @(GameManager.RetryCount)</label>
			<label>Song Progress: @($"{MathF.Max(GameManager.CurrentTimeNoLatency / GameManager.Beatmap.Length * 100f, 0f):N0}")%</label>
		</div>
	</div>
</root>

@code
{
	public static GameHud Instance { get; private set; }

	[Property] GameManager GameManager { get; set; }

	Panel JudgementPanel { get; set; }
	Panel ComboPanel { get; set; }
	TimeSince TimeSinceLastJudgement { get; set; } = 0f;
	int _lastCombo = -1;

	protected override void OnAwake()
	{
		Instance = this;
	}

	protected override void OnTreeFirstBuilt()
	{
		SetCombo(0);
	}

	protected override void OnUpdate()
	{
		if(TimeSinceLastJudgement > 2f && JudgementPanel.Children.Count() > 0)
		{
			JudgementPanel.DeleteChildren();
			TimeSinceLastJudgement = 0f;
		}
	}

	public void SetJudgement(string judgement)
	{
		if(JudgementPanel is null) return;
		JudgementPanel.DeleteChildren(true);
		var label = JudgementPanel.AddChild<Label>();
		label.AddClass(judgement.ToLower());
		label.Text = judgement;
		TimeSinceLastJudgement = 0f;
	}

	public void SetCombo(int combo)
	{
		if(combo == _lastCombo) return;
		if(ComboPanel is null) return;
		ComboPanel.DeleteChildren(true);
		var label = ComboPanel.AddChild<Label>();
		label.Text = $"{combo.ToString()}x";
		_lastCombo = combo;
	}

	void ContinueButton()
	{
		GameManager.Instance.SetPause(false);
	}

	void RetryButton()
	{
		GameManager.RetryCount++;
		Sound.StopAll(0);
		Scene.Load(Scene.Source);
	}

	void QuitButton()
	{
		MainMenuScreen.StartingUrl = "/song-select";
		Scene.Load(GameManager.MenuScene);
	}

	protected override int BuildHash() => System.HashCode.Combine( Time.Now );
}